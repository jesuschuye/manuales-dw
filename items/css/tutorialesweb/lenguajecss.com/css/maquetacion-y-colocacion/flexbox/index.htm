<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="theme-color" content="#1e7bbf">
  <link rel="shortcut icon" href="../../../favicon.ico">
  <title>Flexbox CSS - CSS en español - Lenguaje CSS</title>
  <link rel="preload" href="../../../critical.css" as="style">
  <link rel="preload" href="../../../assets/fonts/blinker-vf.woff2" as="font" crossorigin="">
  <link rel="preload" href="../../../assets/fonts/scope-one-400.woff2" as="font" crossorigin="">
  <meta name="description" content="Flexbox es un módulo de CSS para crear diseños flexibles con un mecanismo novedoso que deja atrás los antiguos y problemáticos sistemas tradicionales de CSS.">
  <link rel="stylesheet" href="../../../critical.css">
  <link rel="stylesheet" href="../../../theme.css">
  <script type="module" src="../../../main.js"></script>
  <link rel="canonical" href="index.htm">
  <meta property="og:title" content="Flexbox CSS - CSS en español">
  <meta property="og:image" content="https://lenguajecss.com/css/maquetacion-y-colocacion/flexbox/flexbox-css.png">
  <meta property="og:type" content="article">
  <meta property="og:description" content="Flexbox es un módulo de CSS para crear diseños flexibles con un mecanismo novedoso que deja atrás los antiguos y problemáticos sistemas tradicionales de CSS.">
  <meta property="og:url" content="https://lenguajecss.com/css/maquetacion-y-colocacion/flexbox/">
  <meta property="twitter:url" content="https://lenguajecss.com/css/maquetacion-y-colocacion/flexbox/">
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:creator" content="@Manz">
  <meta property="twitter:title" content="Flexbox CSS - CSS en español">
  <meta property="twitter:description" content="Flexbox es un módulo de CSS para crear diseños flexibles con un mecanismo novedoso que deja atrás los antiguos y problemáticos sistemas tradicionales de CSS.">
  <meta property="twitter:image:src" content="https://lenguajecss.com/css/maquetacion-y-colocacion/flexbox/flexbox-css.png">
</head>
<body class="css post"><div class="page">
    <div class="sidebar">
      <div class="logo flex-center">
  <a href="/">
    <img width="42" height="42" src="../../../assets/logo.svg" alt="Logo">
    Lenguaje CSS
  </a>
  <div class="icons" style="--icon-size: 32px; --icon-side-padding: 0.15em">
    <a href="https://twitter.com/Manz" title="Twitter"><svg-icon type="social" name="twitter"></svg-icon></a>
    <a href="https://twitch.tv/manzdev" title="Twitch"><svg-icon type="social" name="twitch"></svg-icon></a>
    <a href="https://instagram.com/manz.dev" title="Instagram"><svg-icon type="social" name="instagram"></svg-icon></a>
    <a href="https://youtube.com/ManzDev?sub_confirmation=1" title="YouTube"><svg-icon type="social" name="youtube"></svg-icon></a>
    <a href="https://discord.manz.dev/" title="Servidor de Discord"><svg-icon type="social" name="discord"></svg-icon></a>
  </div>
  <span>Un sitio web de <a href="https://manz.dev/"><mark>Manz.dev</mark></a></span>
</div>

      <form class="search flex-center" action="https://www.google.com/search">
  <label><span>Buscar:</span> <input type="search" name="q" placeholder="Buscar un tema (ej: flex, grid...)" autocomplete="off"></label>
  <label><span>Sitio:</span> <input type="hidden" name="q" value="site:lenguajejs.com OR site:lenguajecss.com OR site:lenguajehtml.com OR site:terminaldelinux.com OR site:manz.dev"></label>
  <div class="search-results"></div>
</form>

      

<style>
  sidebar-link {
    --logo-image: url(../../logo.svg);
  }
</style>

<div class="toc"><sidebar-link title="Volver al índice" href="../../index.htm" back="" direct=""></sidebar-link><sidebar-link href="../../cheatsheets/index.htm" title="CSS3 Cheatsheet" direct=""></sidebar-link><sidebar-section title="Introducción a CSS" href="../../introduccion/index.htm"><sidebar-link href="../../introduccion/que-es-css/index.htm" title="¿Qué es CSS?"></sidebar-link><sidebar-link href="../../introduccion/como-usar-css/index.htm" title="¿Cómo usar CSS?"></sidebar-link><sidebar-link href="../../introduccion/estructura-de-css/index.htm" title="Estructura de CSS"></sidebar-link><sidebar-link href="../../introduccion/minificar-css/index.htm" title="Minificar CSS"></sidebar-link><sidebar-link href="../../introduccion/navegadores-web/index.htm" title="Navegadores web"></sidebar-link><sidebar-link href="../../introduccion/niveles-y-prefijos-css/index.htm" title="Niveles de CSS y prefijos"></sidebar-link><sidebar-link href="../../introduccion/herencia-css/index.htm" title="Herencia en CSS"></sidebar-link><sidebar-link href="../../introduccion/cascada-css/index.htm" title="Cascada en CSS"></sidebar-link><sidebar-link href="../../introduccion/css-custom-properties/index.htm" title="Variables CSS"></sidebar-link><sidebar-link href="../../introduccion/guia-css/index.htm" title="La guía de propiedades CSS"></sidebar-link></sidebar-section><sidebar-section title="Modelo de cajas" href="../../modelo-de-cajas/index.htm"><sidebar-link href="../../modelo-de-cajas/unidades-css/index.htm" title="Unidades CSS"></sidebar-link><sidebar-link href="../../modelo-de-cajas/que-es/index.htm" title="Modelo de cajas"></sidebar-link><sidebar-link href="../../modelo-de-cajas/margenes-y-rellenos/index.htm" title="Márgenes y rellenos"></sidebar-link><sidebar-link href="../../modelo-de-cajas/bordes/index.htm" title="Bordes CSS"></sidebar-link><sidebar-link href="../../modelo-de-cajas/border-radius/index.htm" title="Esquinas redondeadas"></sidebar-link><sidebar-link href="../../modelo-de-cajas/propiedades-logicas-css/index.htm" title="Propiedades lógicas CSS"></sidebar-link><sidebar-link href="../../modelo-de-cajas/bordes-imagenes/index.htm" title="Bordes con imágenes"></sidebar-link><sidebar-link href="../../modelo-de-cajas/funciones-css/index.htm" title="Funciones CSS"></sidebar-link></sidebar-section><sidebar-section title="Colores, fondos e imágenes" href="../../colores-y-fondos/index.htm"><sidebar-link href="../../colores-y-fondos/colores-css/index.htm" title="Colores CSS"></sidebar-link><sidebar-link href="../../colores-y-fondos/propiedad-opacity/index.htm" title="La propiedad opacity"></sidebar-link><sidebar-link href="../../colores-y-fondos/propiedad-background-image/index.htm" title="La propiedad background-image"></sidebar-link><sidebar-link href="../../colores-y-fondos/linear-gradient/index.htm" title="Gradientes lineales"></sidebar-link><sidebar-link href="../../colores-y-fondos/radial-gradient/index.htm" title="Gradientes radiales"></sidebar-link><sidebar-link href="../../colores-y-fondos/conic-gradient/index.htm" title="Gradientes cónicos"></sidebar-link><sidebar-link href="../../colores-y-fondos/imagenes-css/index.htm" title="Imágenes y Objetos"></sidebar-link></sidebar-section><sidebar-section title="Selectores CSS" href="../../selectores/index.htm"><sidebar-link href="../../selectores/selectores-basicos/index.htm" title="Selectores CSS básicos"></sidebar-link><sidebar-link href="../../selectores/selectores-avanzados/index.htm" title="Selectores CSS avanzados"></sidebar-link><sidebar-link href="../../selectores/pseudoclases/index.htm" title="Pseudoclases CSS"></sidebar-link><sidebar-link href="../../selectores/pseudoclases-avanzadas/index.htm" title="Pseudoclases CSS avanzadas"></sidebar-link><sidebar-link href="../../selectores/pseudoelementos/index.htm" title="Pseudoelementos CSS"></sidebar-link><sidebar-link href="../../selectores/atributos/index.htm" title="Atributos CSS"></sidebar-link></sidebar-section><sidebar-section title="Reglas CSS" href="../../reglas-css/index.htm"><sidebar-link href="../../reglas-css/que-son-reglas-css/index.htm" title="¿Qué son las reglas CSS?"></sidebar-link><sidebar-link href="../../reglas-css/la-regla-import/index.htm" title="La regla @import"></sidebar-link><sidebar-link href="../../reglas-css/la-regla-layer/index.htm" title="La regla @layer"></sidebar-link><sidebar-link href="../../reglas-css/la-regla-supports/index.htm" title="La regla @supports"></sidebar-link></sidebar-section><sidebar-section title="Fuentes y tipografías" href="../../fuentes-y-tipografias/index.htm"><sidebar-link href="../../fuentes-y-tipografias/tipografias/index.htm" title="Tipografías CSS"></sidebar-link><sidebar-link href="../../fuentes-y-tipografias/tipografias-externas/index.htm" title="Tipografías externas"></sidebar-link><sidebar-link href="../../fuentes-y-tipografias/fuentes-variables/index.htm" title="Fuentes variables CSS"></sidebar-link><sidebar-link href="../../fuentes-y-tipografias/textos-y-alineaciones/index.htm" title="Textos y alineaciones"></sidebar-link><sidebar-link href="../../fuentes-y-tipografias/propiedades-avanzadas/index.htm" title="Propiedades avanzadas"></sidebar-link><sidebar-link href="../../fuentes-y-tipografias/caracteristicas-personalizadas/index.htm" title="Características personalizadas"></sidebar-link></sidebar-section><sidebar-section title="Representación de datos" href="../../representacion-datos/index.htm"><sidebar-link href="../../representacion-datos/tablas-css/index.htm" title="Tablas CSS"></sidebar-link><sidebar-link href="../../representacion-datos/listas-css/index.htm" title="Listas CSS"></sidebar-link><sidebar-link href="../../representacion-datos/contadores-css/index.htm" title="Contadores CSS"></sidebar-link></sidebar-section><sidebar-section title="Maquetación y colocación" href="../index.htm"><sidebar-link href="../propiedad-display/index.htm" title="La propiedad display"></sidebar-link><sidebar-link href="../posicionamiento-css/index.htm" title="La propiedad position"></sidebar-link><sidebar-link href="../desplazamientos/index.htm" title="La propiedad float"></sidebar-link><sidebar-link href="index.htm" title="Flexbox CSS"></sidebar-link><sidebar-link href="../grid-css/index.htm" title="Grid CSS"></sidebar-link></sidebar-section><sidebar-section title="Interacciones" href="../../interacciones/index.htm"><sidebar-link href="../../interacciones/contornos/index.htm" title="Contornos"></sidebar-link><sidebar-link href="../../interacciones/cursor-del-raton/index.htm" title="Cursor del ratón"></sidebar-link><sidebar-link href="../../interacciones/scroll-y-overflow/index.htm" title="Scroll y Overflow"></sidebar-link><sidebar-link href="../../interacciones/snap-scroll/index.htm" title="CSS Snap Scroll"></sidebar-link></sidebar-section><sidebar-section title="Sombras" href="../../sombras/index.htm"><sidebar-link href="../../sombras/text-shadow/index.htm" title="Sombras CSS en textos"></sidebar-link><sidebar-link href="../../sombras/box-shadow/index.htm" title="Sombras CSS en cajas"></sidebar-link><sidebar-link href="../../sombras/drop-shadow/index.htm" title="Sombras idénticas CSS"></sidebar-link></sidebar-section><sidebar-section title="Efectos" href="../../efectos/index.htm"><sidebar-link href="../../efectos/filtros-css/index.htm" title="Filtros CSS"></sidebar-link><sidebar-link href="../../efectos/modos-de-fusion/index.htm" title="Modos de fusión CSS"></sidebar-link></sidebar-section><sidebar-section title="Máscaras y recortes" href="../../mascaras-y-recortes/index.htm"><sidebar-link href="../../mascaras-y-recortes/clip-path/index.htm" title="La propiedad clip-path"></sidebar-link><sidebar-link href="../../mascaras-y-recortes/mask-image/index.htm" title="La propiedad mask-image"></sidebar-link></sidebar-section><sidebar-section title="Responsive Web Design" href="../../responsive-web-design/index.htm"><sidebar-link href="../../responsive-web-design/que-es/index.htm" title="¿Qué es Responsive Design?"></sidebar-link><sidebar-link href="../../responsive-web-design/bases-responsive/index.htm" title="Bases del Responsive Design"></sidebar-link><sidebar-link href="../../responsive-web-design/media-queries/index.htm" title="Media Queries"></sidebar-link><sidebar-link href="../../responsive-web-design/medios-impresos/index.htm" title="Medios impresos"></sidebar-link><sidebar-link href="../../responsive-web-design/medios-paginados/index.htm" title="Medios paginados"></sidebar-link><sidebar-link href="../../responsive-web-design/preferencias-usuario/index.htm" title="Preferencias de usuario"></sidebar-link></sidebar-section><sidebar-section title="Animaciones CSS" href="../../animaciones/index.htm"><sidebar-link href="../../animaciones/transiciones/index.htm" title="Transiciones CSS"></sidebar-link><sidebar-link href="../../animaciones/timing-function/index.htm" title="Funciones de tiempo"></sidebar-link><sidebar-link href="../../animaciones/animaciones/index.htm" title="Animaciones CSS"></sidebar-link><sidebar-link href="../../animaciones/keyframes/index.htm" title="La regla @keyframes"></sidebar-link></sidebar-section><sidebar-section title="Transformaciones CSS" href="../../transformaciones/index.htm"><sidebar-link href="../../transformaciones/transform/index.htm" title="Transformaciones CSS"></sidebar-link><sidebar-link href="../../transformaciones/transform-translate/index.htm" title="Translaciones 2D"></sidebar-link><sidebar-link href="../../transformaciones/transform-rotate/index.htm" title="Rotaciones 2D"></sidebar-link><sidebar-link href="../../transformaciones/transform-scale/index.htm" title="Escalado 2D"></sidebar-link><sidebar-link href="../../transformaciones/transform-skew/index.htm" title="Deformaciones 2D"></sidebar-link><sidebar-link href="../../transformaciones/transform-3d/index.htm" title="Transformaciones 3D"></sidebar-link><sidebar-link href="../../transformaciones/perspective/index.htm" title="Perspectivas CSS"></sidebar-link></sidebar-section><sidebar-section title="Dibujar con CSS" href="../../dibujar-con-css/index.htm"><sidebar-link href="../../dibujar-con-css/como-empezar/index.htm" title="¿Cómo dibujar con CSS?"></sidebar-link><sidebar-link href="../../dibujar-con-css/estructura-html/index.htm" title="Primeros pasos: Estructura HTML"></sidebar-link><sidebar-link href="../../dibujar-con-css/estructura-css/index.htm" title="Primeros pasos: Estructura CSS"></sidebar-link></sidebar-section></div>

      
    </div>
    <div class="contents">
      <header class="mega">
  <h1>Flexbox CSS</h1><h2>Modelo de cajas flexibles (Flex)</h2></header>

      <div class="content ">
  <div class="breadcrumbs">
  <a href="/">ATRÁS</a> <span>ᐳ</span> <a href="../../index.htm">css</a> <span>ᐳ</span> <a href="index.htm">Flexbox CSS</a>
</div>
<p>Tradicionalmente, en CSS se ha utilizado el posicionamiento (<em>static, relative, absolute...</em>), los elementos en línea o en bloque (<em>y derivados</em>) o los <strong>float</strong>, lo que a grandes rasgos no dejaba de ser un sistema de creación de diseños bastante tradicional que no encaja con los retos que tenemos hoy en día: sistemas de escritorio, dispositivos móviles, múltiples resoluciones, etc...</p>
<p><img src="flexbox-css.png" alt="Flexbox CSS" width="1065" height="440" loading="lazy"></p>
<p><strong>Flexbox</strong> es un sistema de <strong>elementos flexibles</strong> que llega con la idea de olvidar estos mecanismos y acostumbrarnos a una mecánica más potente, limpia y personalizable, en la que los elementos HTML se adaptan y colocan automáticamente y es más fácil personalizar los diseños. Está especialmente diseñado para crear, mediante CSS, estructuras de <strong>una sóla dimensión</strong>.</p>
<h3 id="conceptos" tabindex="-1">Conceptos</h3>
<p>Para empezar a utilizar <strong>flexbox</strong> lo primero que debemos hacer es conocer algunos de los elementos básicos de este nuevo esquema, que son los siguientes:</p>
<p><img src="flexbox-como-funciona.png" alt="Flexbox CSS: ¿Cómo funciona?" width="1020" height="264" loading="lazy"></p>
<ul>
<li>
<p><strong>Contenedor</strong>: Es el elemento padre que tendrá en su interior cada uno de los ítems flexibles. Observa que al contrario que muchas otras estructuras CSS, por norma general, en Flex establecemos las propiedades al elemento padre.</p>
<ul>
<li><strong>Eje principal</strong>: Los contenedores flexibles tendrán una orientación principal específica. Por defecto, el eje principal del contenedor flexbox es en horizontal (<em>en fila</em>).</li>
<li><strong>Eje secundario</strong>: De la misma forma, los contenedores flexibles tendrán una orientación secundaria, perpendicular a la principal. Si la principal es en horizontal, la secundaria será en vertical (<em>y viceversa</em>).</li>
</ul>
</li>
<li>
<p><strong>Ítem</strong>: Cada uno de los <strong>hijos</strong> que tendrá el contenedor en su interior.</p>
</li>
</ul>
<p>Una vez tenemos claro esto, imaginemos el siguiente escenario:</p>
<!-- code-sandbox height="120"></code-sandbox -->
<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- Flex container --></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- Flex items --></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item item-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<p>Para activar el modo <strong>flexbox</strong>, hemos utilizado sobre el elemento contenedor la propiedad <code>display</code> que vimos en <a href="../propiedad-display/index.htm">Tipos de elementos</a>, y especificar el valor <code>flex</code> o <code>inline-flex</code> (<em>dependiendo de como queramos que se comporte el contenedor</em>):</p>
<table>
<thead>
<tr>
<th>Tipo de elemento</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>inline-flex</code></td>
<td>Establece un contenedor en línea, similar a <code>inline-block</code> (ocupa solo el contenido).</td>
</tr>
<tr>
<td><code>flex</code></td>
<td>Establece un contenedor en bloque, similar a <code>block</code> (ocupa todo el ancho del padre).</td>
</tr>
</tbody>
</table>
<p>Por defecto, y sólo con esto, observaremos que los elementos se disponen todos sobre una misma línea. Esto ocurre porque estamos utilizando el modo <strong>flexbox</strong> y estaremos trabajando con ítems flexibles básicos, garantizando que no se desbordarán ni mostrarán los problemas que, por ejemplo, tienen los porcentajes sobre elementos que no utilizan flexbox.</p>
<div class="example example-1">
  <strong>display:</strong>
  <button class="mode" data-property="display" data-value="flex">flex</button>
  <button class="mode" data-property="display" data-value="inline-flex">inline-flex</button>
  <div class="container">
    <div class="item item-1">1</div>
    <div class="item item-2">2</div>
    <div class="item item-3">3</div>
  </div>
</div>
<style>
  .example-1 .container {
    display: flex;
    background: steelblue;
  }
  .example-1 .item {
    border: 2px solid black;
    background-color: grey;
    color: white;
    width: 50px;
    height: 50px;
  }
</style>
<script>
  (() => {
    const buttons = Array.from(document.querySelectorAll(".example-1 button.mode"));
    const container = document.querySelector(".example-1 .container");
    buttons.forEach(button => button.onclick = () => container.style[button.dataset.property] = button.dataset.value);
  })();
</script>
<h3 id="dirección-de-los-ejes" tabindex="-1">Dirección de los ejes</h3>
<p>Existen dos propiedades principales para manipular la dirección y comportamiento de los ítems a lo largo del eje principal del contenedor. Son las siguientes:</p>
<table>
<thead>
<tr>
<th>Propiedad</th>
<th>Valor</th>
<th>Significado</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>flex-direction</code></td>
<td><strong>row</strong> | row-reverse | column | column-reverse</td>
<td>Cambia la orientación del eje principal.</td>
</tr>
</tbody>
</table>
<p>Mediante la propiedad <code>flex-direction</code> podemos modificar la dirección del <strong>eje principal</strong> del contenedor para que se oriente en horizontal (<em>por defecto</em>) o en vertical. Además, también podemos incluir el sufijo <code>-reverse</code> para indicar que coloque los ítems en orden inverso.</p>
<table>
<thead>
<tr>
<th>Valor</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>row</code></td>
<td>Establece la dirección del eje principal en horizontal.</td>
</tr>
<tr>
<td><code>row-reverse</code></td>
<td>Establece la dirección del eje principal en horizontal (invertido).</td>
</tr>
<tr>
<td><code>column</code></td>
<td>Establece la dirección del eje principal en vertical.</td>
</tr>
<tr>
<td><code>column-reverse</code></td>
<td>Establece la dirección del eje principal en vertical (invertido).</td>
</tr>
</tbody>
</table>
<p>Esto nos permite tener un control muy alto sobre el orden de los elementos en una página. Veamos la aplicación de estas propiedades sobre el ejemplo anterior, para modificar el flujo del eje principal del contenedor:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">{</span><br>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><br>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span><br>  <span class="token property">background</span><span class="token punctuation">:</span> steelblue<span class="token punctuation">;</span><br><span class="token punctuation">}</span><br><br><span class="token selector">.item</span> <span class="token punctuation">{</span><br>  <span class="token property">background</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<p>A continuación podemos ver un ejemplo interactivo:</p>
<div class="example example-2">
  <strong>flex-direction:</strong>
  <button class="mode" data-property="flex-direction" data-value="row">row</button>
  <button class="mode" data-property="flex-direction" data-value="column">column</button>
  <button class="mode" data-property="flex-direction" data-value="row-reverse">row-reverse</button>
  <button class="mode" data-property="flex-direction" data-value="column-reverse">column-reverse</button>
  <div class="container">
    <div class="item item-1">1</div>
    <div class="item item-2">2</div>
    <div class="item item-3">3</div>
  </div>
</div>
<style>
  .example-2 .container {
    display: flex;
    background: steelblue;
  }
  .example-2 .item {
    border: 2px solid black;
    background-color: grey;
    color: white;
    width: 50px;
    height: 50px;
  }
</style>
<script>
  (() => {
    const buttons = Array.from(document.querySelectorAll(".example-2 button.mode"));
    const container = document.querySelector(".example-2 .container");
    buttons.forEach(button => button.onclick = () => container.style[button.dataset.property] = button.dataset.value);
  })();
</script>
<h3 id="contenedor-flexbox-multilínea" tabindex="-1">Contenedor flexbox multilínea</h3>
<p>Por otro lado, existe otra propiedad llamada <code>flex-wrap</code> con la que podemos especificar el comportamiento del contenedor respecto a evitar que se desborde (<em>nowrap, valor por defecto</em>) o permitir que lo haga, en cuyo caso, estaríamos hablando de un <strong>contenedor flexbox multilinea</strong>.</p>
<table>
<thead>
<tr>
<th>Propiedad</th>
<th>Valor</th>
<th>Significado</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>flex-wrap</code></td>
<td><strong>nowrap</strong> | wrap | wrap-reverse</td>
<td>Evita o permite el desbordamiento (multilinea).</td>
</tr>
</tbody>
</table>
<p>Los valores que puede tomar esta propiedad, son las siguientes:</p>
<table>
<thead>
<tr>
<th>Valor</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>nowrap</strong></td>
<td>Establece los ítems en una sola línea (no permite que se desborde el contenedor).</td>
</tr>
<tr>
<td>wrap</td>
<td>Establece los ítems en modo multilínea (permite que se desborde el contenedor).</td>
</tr>
<tr>
<td>wrap-reverse</td>
<td>Establece los ítems en modo multilínea, pero en dirección inversa.</td>
</tr>
</tbody>
</table>
<p>Teniendo en cuenta estos valores de la propiedad <code>flex-wrap</code>, podemos conseguir cosas como la siguiente:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">{</span><br>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><br>  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>  <span class="token comment">/* Comportamiento por defecto: nowrap */</span><br>  <span class="token property">background</span><span class="token punctuation">:</span> steelblue<span class="token punctuation">;</span><br>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><br><span class="token punctuation">}</span><br><br><span class="token selector">.item</span> <span class="token punctuation">{</span><br>  <span class="token property">background</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span><br>  <span class="token property">width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<p>En el caso de especificar <strong>nowrap</strong> (<em>u omitir la propiedad <code>flex-wrap</code></em>) en el contenedor, los 3 ítems se mostrarían en una misma línea del contenedor. En ese caso, cada ítem debería tener un 50% de ancho (<em>o sea, 100px de los 200px del contenedor</em>). Un tamaño de <strong>100px</strong> por ítem, sumaría un total de <strong>300px</strong>, que no cabrían en el contenedor de <strong>200px</strong>, por lo que <strong>flexbox</strong> reajusta los ítems flexibles para que quepan todos en la misma línea, manteniendo las mismas proporciones.</p>
<p>Sin embargo, si especificamos <strong>wrap</strong> en la propiedad <code>flex-wrap</code>, lo que permitimos es que el contenedor se pueda desbordar, pasando a ser un contenedor <strong>multilínea</strong>, que mostraría el <strong>ítem 1 y 2</strong> en la primera linea (<em>con un tamaño de 100px cada uno</em>) y el <strong>ítem 3</strong> en la línea siguiente, dejando un espacio libre para un posible <strong>ítem 4</strong>.</p>
<div class="example example-3">
  <strong>flex-wrap:</strong>
  <button class="mode" data-property="flex-wrap" data-value="nowrap">nowrap</button>
  <button class="mode" data-property="flex-wrap" data-value="wrap">wrap</button>
  <button class="mode" data-property="flex-wrap" data-value="wrap-reverse">wrap-reverse</button>
  <div class="container">
    <div class="item item-1">1</div>
    <div class="item item-2">2</div>
    <div class="item item-3">3</div>
  </div>
</div>
<style>
  .example-3 .container {
    display: flex;
    flex-wrap: nowrap;
    background: steelblue;
    width: 200px;
    min-height: 100px;
  }
  .example-3 .item {
    border: 2px solid black;
    background-color: grey;
    color: white;
    width: 50%;
    height: 50px;
  }
</style>
<script>
  (() => {
    const buttons = Array.from(document.querySelectorAll(".example-3 button.mode"));
    const container = document.querySelector(".example-3 .container");
    buttons.forEach(button => button.onclick = () => container.style[button.dataset.property] = button.dataset.value);
  })();
</script>
<h3 id="atajo-dirección-de-los-ejes" tabindex="-1">Atajo: Dirección de los ejes</h3>
<p>Recuerda que existe una propiedad de atajo (short-hand) llamada <code>flex-flow</code>, con la que podemos resumir los valores de las propiedades <code>flex-direction</code> y <code>flex-wrap</code>, especificándolas en una sola propiedad y ahorrándonos utilizar las propiedades concretas:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">{</span><br>  <span class="token comment">/* flex-flow: &lt;flex-direction> &lt;flex-wrap>; */</span><br>  <span class="token property">flex-flow</span><span class="token punctuation">:</span> row wrap<span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<h3 id="propiedades-de-alineación" tabindex="-1">Propiedades de alineación</h3>
<p>Ahora que tenemos un control básico del contenedor de estos ítems flexibles, necesitamos conocer las propiedades existentes dentro de flexbox para disponer los ítems dependiendo de nuestro objetivo. Vamos a echar un vistazo a 4 propiedades interesantes para ello, la primera de ellas actua en el eje principal, mientras que el resto en el eje secundario:</p>
<table>
<thead>
<tr>
<th>Propiedad</th>
<th>Valor</th>
<th>Eje</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>justify-content</code></td>
<td><strong>flex-start</strong> | flex-end | center | space-between | space-around | space-evenly</td>
<td>1️⃣</td>
</tr>
<tr>
<td><code>align-content</code></td>
<td>flex-start | flex-end | center | space-between | space-around | space-evenly | <strong>stretch</strong></td>
<td>2️⃣</td>
</tr>
<tr>
<td><code>align-items</code></td>
<td>flex-start | flex-end | center | <strong>stretch</strong> | baseline</td>
<td>2️⃣</td>
</tr>
<tr>
<td><code>align-self</code></td>
<td><strong>auto</strong> | flex-start | flex-end | center | stretch | baseline</td>
<td>2️⃣</td>
</tr>
</tbody>
</table>
<p>De esta pequeña lista, hay que centrarse en primer lugar en la primera y la tercera propiedad, que son las más importantes (<em>las otras dos son casos particulares que explicaremos más adelante</em>):</p>
<ul>
<li><code>justify-content</code>: Se utiliza para alinear los ítems del <strong>eje principal</strong> (<em>por defecto, el horizontal</em>).</li>
<li><code>align-items</code>: Usada para alinear los ítems del <strong>eje secundario</strong> (<em>por defecto, el vertical</em>).</li>
</ul>
<h4 id="sobre-el-eje-principal" tabindex="-1">Sobre el eje principal</h4>
<p>La primera propiedad, <code>justify-content</code>, sirve para colocar los ítems de un contenedor mediante una disposición concreta a lo largo del <strong>eje principal</strong>:</p>
<table>
<thead>
<tr>
<th>Valor</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>flex-start</strong></td>
<td>Agrupa los ítems al principio del eje principal.</td>
</tr>
<tr>
<td>flex-end</td>
<td>Agrupa los ítems al final del eje principal.</td>
</tr>
<tr>
<td>center</td>
<td>Agrupa los ítems al centro del eje principal.</td>
</tr>
<tr>
<td>space-between</td>
<td>Distribuye los ítems dejando el máximo espacio para separarlos.</td>
</tr>
<tr>
<td>space-around</td>
<td>Distribuye los ítems dejando el mismo espacio alrededor de ellos (izq/dcha).</td>
</tr>
<tr>
<td>space-evenly</td>
<td>Distribuye los ítems dejando el mismo espacio (solapado) a izquierda y derecha.</td>
</tr>
</tbody>
</table>
<p>Con cada uno de estos valores, modificaremos la disposición de los ítems del contenedor donde se aplica, pasando a colocarse como se ve en el ejemplo interactivo siguiente (<em>nótense los números para observar el orden de cada ítem</em>):</p>
<div class="example example-4">
  <strong>justify-content:</strong>
  <button class="mode" data-property="justify-content" data-value="flex-start">flex-start</button>
  <button class="mode" data-property="justify-content" data-value="flex-end">flex-end</button>
  <button class="mode" data-property="justify-content" data-value="center">center</button>
  <button class="mode" data-property="justify-content" data-value="space-between">space-between</button>
  <button class="mode" data-property="justify-content" data-value="space-around">space-around</button>
  <button class="mode" data-property="justify-content" data-value="space-evenly">space-evenly</button>
  <div class="container">
    <div class="item item-1">1</div>
    <div class="item item-2">2</div>
    <div class="item item-3">3</div>
  </div>
</div>
<style>
  .example-4 .container {
    display: flex;
    background: steelblue;
    min-height: 125px;
  }
  .example-4 .item {
    border: 2px solid black;
    background-color: grey;
    color: white;
    width: 50px;
    height: 50px;
  }
</style>
<script>
  (() => {
    const buttons = Array.from(document.querySelectorAll(".example-4 button.mode"));
    const container = document.querySelector(".example-4 .container");
    buttons.forEach(button => button.onclick = () => container.style[button.dataset.property] = button.dataset.value);
  })();
</script>
<p>Una vez entendido este caso, debemos atender a la propiedad <code>align-content</code>, que es un caso particular del anterior. Nos servirá cuando estemos tratando con un contenedor flex multilinea, que es un contenedor en el que los ítems no caben en el ancho disponible, y por lo tanto, el eje principal se divide en múltiples líneas (<em>por ejemplo, usando flex-wrap: wrap</em>).</p>
<p>De esta forma, <code>align-content</code> servirá para alinear cada una de las líneas del contenedor multilinea. Los valores que puede tomar son los siguientes:</p>
<table>
<thead>
<tr>
<th>Valor</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td>flex-start</td>
<td>Agrupa los ítems al principio del eje principal.</td>
</tr>
<tr>
<td>flex-end</td>
<td>Agrupa los ítems al final del eje principal.</td>
</tr>
<tr>
<td>center</td>
<td>Agrupa los ítems al centro del eje principal.</td>
</tr>
<tr>
<td>space-between</td>
<td>Distribuye los ítems desde el inicio hasta el final.</td>
</tr>
<tr>
<td>space-around</td>
<td>Distribuye los ítems dejando el mismo espacio a los lados de cada uno.</td>
</tr>
<tr>
<td><strong>stretch</strong></td>
<td>Estira los ítems para ocupar de forma equitativa todo el espacio.</td>
</tr>
</tbody>
</table>
<p>Con estos valores, vemos como cambiamos la disposición en vertical (<em>porque partimos de un ejemplo en el que estamos utilizando flex-direction: row, y el eje principal es horizontal</em>) de los ítems que están dentro de un contenedor multilinea.</p>
<p>En el ejemplo siguiente, veremos que al indicar un contenedor de <strong>200 píxels de alto</strong> con ítems de <strong>50px</strong> de alto y un <strong>flex-wrap</strong> establecido para tener contenedores multilinea, podemos utilizar la propiedad <code>align-content</code> para alinear los ítems de forma vertical de modo que se queden en la zona inferior del contenedor:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">{</span><br>  <span class="token property">background</span><span class="token punctuation">:</span> #CCC<span class="token punctuation">;</span><br>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><br>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><br>  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><br><br>  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span><br>  <span class="token property">align-content</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span><br><span class="token punctuation">}</span><br><br><span class="token selector">.item</span> <span class="token punctuation">{</span><br>  <span class="token property">background</span><span class="token punctuation">:</span> #777<span class="token punctuation">;</span><br>  <span class="token property">width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span><br>  <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<p>Observa como funciona la propiedad <code>align-content</code> en el siguiente ejemplo interactivo:</p>
<div class="example example-5">
  <strong>align-content:</strong>
  <button class="mode" data-property="align-content" data-value="flex-start">flex-start</button>
  <button class="mode" data-property="align-content" data-value="flex-end">flex-end</button>
  <button class="mode" data-property="align-content" data-value="center">center</button>
  <button class="mode" data-property="align-content" data-value="space-between">space-between</button>
  <button class="mode" data-property="align-content" data-value="space-around">space-around</button>
  <button class="mode" data-property="align-content" data-value="stretch">stretch</button>
  <div class="container">
    <div class="item item-1">1</div>
    <div class="item item-2">2</div>
    <div class="item item-3">3</div>
    <div class="item item-1">4</div>
    <div class="item item-2">5</div>
    <div class="item item-3">6</div>
    <div class="item item-1">7</div>
    <div class="item item-2">8</div>
    <div class="item item-3">9</div>
  </div>
</div>
<style>
  .example-5 .container {
    display: flex;
    flex-wrap: wrap;
    background: steelblue;
    width: 300px;
    min-height: 175px;
  }
  .example-5 .item {
    border: 2px solid black;
    background-color: grey;
    color: white;
    width: 50px;
    min-height: 50px;
  }
</style>
<script>
  (() => {
    const buttons = Array.from(document.querySelectorAll(".example-5 button.mode"));
    const container = document.querySelector(".example-5 .container");
    buttons.forEach(button => button.onclick = () => container.style[button.dataset.property] = button.dataset.value);
  })();
</script>
<h4 id="sobre-el-eje-secundario" tabindex="-1">Sobre el eje secundario</h4>
<p>La otra propiedad importante de este apartado es <code>align-items</code>, que se encarga de alinear los ítems en el eje secundario del contenedor. Hay que tener cuidado de no confundir <code>align-content</code> con <code>align-items</code>, puesto que el primero actúa sobre cada una de las líneas de un contenedor multilinea (<em>no tiene efecto sobre contenedores de una sola línea</em>), mientras que <code>align-items</code> lo hace sobre la línea actual. Los valores que puede tomar son los siguientes:</p>
<table>
<thead>
<tr>
<th>Valor</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td>flex-start</td>
<td>Alinea los ítems al principio del eje secundario.</td>
</tr>
<tr>
<td>flex-end</td>
<td>Alinea los ítems al final del eje secundario.</td>
</tr>
<tr>
<td>center</td>
<td>Alinea los ítems al centro del eje secundario.</td>
</tr>
<tr>
<td><strong>stretch</strong></td>
<td>Alinea los ítems estirándolos de modo que cubran desde el inicio hasta el final del contenedor.</td>
</tr>
<tr>
<td>baseline</td>
<td>Alinea los ítems en el contenedor según la base del contenido de los ítems del contenedor.</td>
</tr>
</tbody>
</table>
<p>Veamos un ejemplo interactivo con <code>justify-content</code> y <code>align-items</code>:</p>
<div class="example example-6">
  <strong>justify-content:</strong>
  <button class="mode" data-property="justify-content" data-value="flex-start">flex-start</button>
  <button class="mode" data-property="justify-content" data-value="flex-end">flex-end</button>
  <button class="mode" data-property="justify-content" data-value="center">center</button>
  <button class="mode" data-property="justify-content" data-value="space-between">space-between</button>
  <button class="mode" data-property="justify-content" data-value="space-around">space-around</button>
  <button class="mode" data-property="justify-content" data-value="space-evenly">space-evenly</button>
  <br>
  <strong>align-items:</strong>
  <button class="mode" data-property="align-items" data-value="flex-start">flex-start</button>
  <button class="mode" data-property="align-items" data-value="flex-end">flex-end</button>
  <button class="mode" data-property="align-items" data-value="center">center</button>
  <button class="mode" data-property="align-items" data-value="stretch">stretch</button>
  <button class="mode" data-property="align-items" data-value="baseline">baseline</button>
  <div class="container">
    <div class="item item-1">1</div>
    <div class="item item-2">2</div>
    <div class="item item-3">3</div>
  </div>
</div>
<style>
  .example-6 .container {
    display: flex;
    background: steelblue;
    min-height: 150px;
  }
  .example-6 .item {
    border: 2px solid black;
    background-color: grey;
    color: white;
    width: 50px;
    min-height: 50px;
  }
</style>
<script>
  (() => {
    const buttons = Array.from(document.querySelectorAll(".example-6 button.mode"));
    const container = document.querySelector(".example-6 .container");
    buttons.forEach(button => button.onclick = () => container.style[button.dataset.property] = button.dataset.value);
  })();
</script>
<p>Por otro lado, la propiedad <code>align-self</code> actúa exactamente igual que <code>align-items</code>, sin embargo es la primera propiedad de flexbox que vemos que se utiliza sobre un ítem hijo específico y no sobre el elemento contenedor. Salvo por este detalle, funciona exactamente igual que <code>align-items</code>.</p>
<p>Gracias a ese detalle, <code>align-self</code> nos permite cambiar el comportamiento de <code>align-items</code> y sobreescribirlo con comportamientos específicos para ítems concretos que no queremos que se comporten igual que el resto. La propiedad puede tomar los siguientes valores:</p>
<table>
<thead>
<tr>
<th>Valor</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td>flex-start</td>
<td>Alinea los ítems al principio del contenedor.</td>
</tr>
<tr>
<td>flex-end</td>
<td>Alinea los ítems al final del contenedor.</td>
</tr>
<tr>
<td>center</td>
<td>Alinea los ítems al centro del contenedor.</td>
</tr>
<tr>
<td>stretch</td>
<td>Alinea los ítems estirándolos al tamaño del contenedor.</td>
</tr>
<tr>
<td>baseline</td>
<td>Alinea los ítems en el contenedor según la base de los ítems.</td>
</tr>
<tr>
<td><strong>auto</strong></td>
<td>Hereda el valor de <strong>align-items</strong> del padre (si no se ha definido, es <strong>stretch</strong>).</td>
</tr>
</tbody>
</table>
<p>Si se especifica el valor <strong>auto</strong> a la propiedad <code>align-self</code>, el navegador le asigna el valor de la propiedad <code>align-items</code> del contenedor padre, y en caso de no existir, el valor por defecto: <strong>stretch</strong>. Veamos un ejemplo para verlo en funcionamiento:</p>
<div class="example example-7">
  <strong>justify-content:</strong>
  <button class="mode" data-property="justify-content" data-value="flex-start">flex-start</button>
  <button class="mode" data-property="justify-content" data-value="flex-end">flex-end</button>
  <button class="mode" data-property="justify-content" data-value="center">center</button>
  <button class="mode" data-property="justify-content" data-value="space-between">space-between</button>
  <button class="mode" data-property="justify-content" data-value="space-around">space-around</button>
  <button class="mode" data-property="justify-content" data-value="space-evenly">space-evenly</button>
  <br>
  <strong>align-items:</strong>
  <button class="mode" data-property="align-items" data-value="flex-start">flex-start</button>
  <button class="mode" data-property="align-items" data-value="flex-end">flex-end</button>
  <button class="mode" data-property="align-items" data-value="center">center</button>
  <button class="mode" data-property="align-items" data-value="stretch">stretch</button>
  <button class="mode" data-property="align-items" data-value="baseline">baseline</button>
  <br>
  <strong>align-self:</strong>
  <button class="self" data-property="align-self" data-value="flex-start">flex-start</button>
  <button class="self" data-property="align-self" data-value="flex-end">flex-end</button>
  <button class="self" data-property="align-self" data-value="center">center</button>
  <button class="self" data-property="align-self" data-value="stretch">stretch</button>
  <button class="self" data-property="align-self" data-value="baseline">baseline</button>
  <button class="self" data-property="align-self" data-value="auto">auto</button>
  <div class="container">
    <div class="item item-1">1</div>
    <div class="item item-2">2</div>
    <div class="item item-3">3</div>
    <div class="item item-4">4</div>
    <div class="item item-5">5</div>
    <div class="item item-6">self</div>
  </div>
</div>
<style>
  .example-7 .container {
    display: flex;
    background: steelblue;
    min-height: 150px;
  }
  .example-7 .item {
    border: 2px solid black;
    background-color: grey;
    color: white;
    width: 50px;
    min-height: 50px;
  }
  .example-7 .item-6 {
    background: orangered;
  }
</style>
<script>
  (() => {
    const buttons = Array.from(document.querySelectorAll(".example-7 button.mode"));
    const selfButtons = Array.from(document.querySelectorAll(".example-7 button.self"));
    const container = document.querySelector(".example-7 .container");
    const self = document.querySelector(".example-7 .item-6");
    buttons.forEach(button => button.onclick = () => container.style[button.dataset.property] = button.dataset.value);
    selfButtons.forEach(button => button.onclick = () => self.style[button.dataset.property] = button.dataset.value);
  })();
</script>
<h4 id="atajo-alineaciones" tabindex="-1">Atajo: Alineaciones</h4>
<p>Existe una propiedad de atajo con la que se pueden establecer los valores de <code>align-content</code> y de <code>justify-content</code> de una sola vez, denominada <code>place-content</code>:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">{</span><br>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><br>  <span class="token property">place-content</span><span class="token punctuation">:</span> flex-start flex-end<span class="token punctuation">;</span><br><br>  <span class="token comment">/* Equivalente a... */</span><br>  <span class="token property">align-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span><br>  <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<h3 id="propiedades-de-hijos" tabindex="-1">Propiedades de hijos</h3>
<p>A excepción de la propiedad <code>align-self</code>, todas las propiedades que hemos visto hasta ahora se aplican sobre el elemento <strong>contenedor</strong>. Las siguientes propiedades, sin embargo, se aplican sobre los ítems hijos. Echemos un vistazo:</p>
<table>
<thead>
<tr>
<th>Propiedad</th>
<th>Valor</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>flex-grow</code></td>
<td><strong>0</strong> | <badge-type class="number"></badge-type></td>
<td>Número que indica el factor de crecimiento del ítem respecto al resto.</td>
</tr>
<tr>
<td><code>flex-shrink</code></td>
<td><strong>1</strong> | <badge-type class="number"></badge-type></td>
<td>Número que indica el factor de decrecimiento del ítem respecto al resto.</td>
</tr>
<tr>
<td><code>flex-basis</code></td>
<td><badge-type class="size"></badge-type> | <strong>content</strong></td>
<td>Tamaño base de los ítems antes de aplicar variación.</td>
</tr>
<tr>
<td><code>order</code></td>
<td><strong>0</strong> | <badge-type class="number"></badge-type></td>
<td>Número (peso) que indica el orden de aparición de los ítems.</td>
</tr>
</tbody>
</table>
<p>En primer lugar, tenemos la propiedad <code>flex-grow</code> para indicar el factor de crecimiento de los ítems en el caso de que no tengan un ancho específico. Por ejemplo, si con <code>flex-grow</code> indicamos un valor de <strong>1</strong> a todos sus ítems, tendrían el mismo tamaño cada uno de ellos. Pero si colocamos un valor de <strong>1</strong> a todos los elementos, salvo a uno de ellos, que le indicamos <strong>2</strong>, ese ítem será más grande que los anteriores. Los ítems a los que no se le especifique ningún valor, tendrán por defecto valor de <strong>0</strong>.</p>
<p>En segundo lugar, tenemos la propiedad <code>flex-shrink</code> que es la opuesta a <code>flex-grow</code>. Mientras que la anterior indica un factor de crecimiento, <code>flex-shrink</code> hace justo lo contrario, aplica un factor de decrecimiento. De esta forma, los ítems que tengan un valor numérico más grande, serán más pequeños, mientras que los que tengan un valor numérico más pequeño serán más grandes, justo al contrario de como funciona la propiedad <code>flex-grow</code>.</p>
<p>Por último, tenemos la propiedad <code>flex-basis</code>, que define el tamaño por defecto (<em>de base</em>) que tendrán los ítems antes de aplicarle la distribución de espacio. Generalmente, se aplica un tamaño (<em>unidades, porcentajes, etc...</em>), pero también se puede aplicar la palabra clave <strong>content</strong> que ajusta automáticamente el tamaño al contenido del ítem, que es su valor por defecto.</p>
<p>Veamos un ejemplo interactivo sobre estas primeras 3 propiedades (<em>más adelante veremos la propiedad <code>order</code></em>):</p>
<div class="example example-8">
  <strong>flex-grow (item-3):</strong>
  <button class="item-3" data-property="flex-grow" data-value="0">0</button>
  <button class="item-3" data-property="flex-grow" data-value="1">1</button>
  <button class="item-3" data-property="flex-grow" data-value="2">2</button>
  <strong>flex-grow (item-6):</strong>
  <button class="item-6" data-property="flex-grow" data-value="0">0</button>
  <button class="item-6" data-property="flex-grow" data-value="1">1</button>
  <button class="item-6" data-property="flex-grow" data-value="2">2</button>
  <br>
  <strong>flex-shrink (item-3):</strong>
  <button class="item-3" data-property="flex-shrink" data-value="1">1</button>
  <button class="item-3" data-property="flex-shrink" data-value="2">2</button>
  <button class="item-3" data-property="flex-shrink" data-value="3">3</button>
  <strong>flex-shrink (item-6):</strong>
  <button class="item-6" data-property="flex-shrink" data-value="1">1</button>
  <button class="item-6" data-property="flex-shrink" data-value="2">2</button>
  <button class="item-6" data-property="flex-shrink" data-value="3">3</button>
  <br>
  <strong>flex-basis (all items):</strong>
  <button class="mode" data-property="--basis" data-value="content">content</button>
  <button class="mode" data-property="--basis" data-value="20px">20px</button>
  <button class="mode" data-property="--basis" data-value="100px">100px</button>
  <button class="mode" data-property="--basis" data-value="150px">150px</button>
  <div class="container">
    <div class="item item-1">1</div>
    <div class="item item-2">2</div>
    <div class="item item-3">3</div>
    <div class="item item-4">4</div>
    <div class="item item-5">5</div>
    <div class="item item-6">6</div>
  </div>
</div>
<style>
  .example-8 .container {
    display: flex;
    background: steelblue;
    min-height: 150px;
  }
  .example-8 .item {
    border: 2px solid black;
    background-color: grey;
    color: white;
    min-height: 50px;
    flex-basis: var(--basis, 50px);
  }
  .example-8 div.item-3,
  .example-8 div.item-6 {
    background: orangered;
  }
</style>
<script>
  (() => {
    const buttons = Array.from(document.querySelectorAll(".example-8 button.mode"));
    const i3buttons = Array.from(document.querySelectorAll(".example-8 button.item-3"));
    const i6buttons = Array.from(document.querySelectorAll(".example-8 button.item-6"));
    const example8 = document.querySelector(".example-8");
    const item3 = document.querySelector(".example-8 div.item-3");
    const item6 = document.querySelector(".example-8 div.item-6");
    buttons.forEach(button => button.onclick = () => example8.style.setProperty(button.dataset.property, button.dataset.value));
    i3buttons.forEach(button => button.onclick = () => item3.style[button.dataset.property] = button.dataset.value);
    i6buttons.forEach(button => button.onclick = () => item6.style[button.dataset.property] = button.dataset.value);
  })();
</script>
<h4 id="atajo-propiedades-de-hijos" tabindex="-1">Atajo: Propiedades de hijos</h4>
<p>Existe una propiedad llamada <code>flex</code> que sirve de atajo para estas tres propiedades de los ítems hijos. Funciona de la siguiente forma:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">{</span><br>  <span class="token comment">/* flex: &lt;flex-grow> &lt;flex-shrink> &lt;flex-basis> */</span><br>  <span class="token property">flex</span><span class="token punctuation">:</span> 1 3 35%<span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<h3 id="huecos-gaps" tabindex="-1">Huecos (gaps)</h3>
<p>Existen dos propiedades de flexbox que han surgido recientemente: <code>row-gap</code> y <code>column-gap</code>. Dichas propiedades, permiten establecer el tamaño de un «hueco» entre ítems desde el elemento padre contenedor, y sin necesidad de estar utilizando <code>padding</code> o <code>margin</code> en los elementos hijos.</p>
<table>
<thead>
<tr>
<th>Propiedad</th>
<th>Valor</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>row-gap</code></td>
<td><strong>normal</strong> | <badge-type class="size"></badge-type></td>
<td>Espacio entre filas (sólo si flex-direction: column)</td>
</tr>
<tr>
<td><code>column-gap</code></td>
<td><strong>normal</strong> | <badge-type class="size"></badge-type></td>
<td>Espacio entre columnas (sólo si flex-direction: row)</td>
</tr>
</tbody>
</table>
<p>Ten en cuenta que sólo una de las dos propiedades tendrá efecto, dependiendo de si la propiedad <code>flex-direction</code> está establecida en <code>column</code> o en <code>row</code>. Eso sí, es posible usar ambas si tenemos la propiedad <code>flex-wrap</code> definida a <code>wrap</code> y, por lo tanto, disponemos de multicolumnas flexbox.</p>
<div class="example example-9">
  <strong>justify-content:</strong>
  <button class="mode" data-property="justify-content" data-value="flex-start">flex-start</button>
  <button class="mode" data-property="justify-content" data-value="flex-end">flex-end</button>
  <button class="mode" data-property="justify-content" data-value="center">center</button>
  <button class="mode" data-property="justify-content" data-value="space-between">space-between</button>
  <button class="mode" data-property="justify-content" data-value="space-around">space-around</button>
  <button class="mode" data-property="justify-content" data-value="space-evenly">space-evenly</button>
  <br>
  <strong>align-items:</strong>
  <button class="mode" data-property="align-items" data-value="flex-start">flex-start</button>
  <button class="mode" data-property="align-items" data-value="flex-end">flex-end</button>
  <button class="mode" data-property="align-items" data-value="center">center</button>
  <button class="mode" data-property="align-items" data-value="stretch">stretch</button>
  <button class="mode" data-property="align-items" data-value="baseline">baseline</button>
  <br>
  <strong>align-content:</strong>
  <button class="mode" data-property="align-content" data-value="flex-start">flex-start</button>
  <button class="mode" data-property="align-content" data-value="flex-end">flex-end</button>
  <button class="mode" data-property="align-content" data-value="center">center</button>
  <button class="mode" data-property="align-content" data-value="stretch">stretch</button>
  <button class="mode" data-property="align-content" data-value="baseline">baseline</button>
  <br>
  <strong>flex-wrap:</strong>
  <button class="mode" data-property="flex-wrap" data-value="nowrap">nowrap</button>
  <button class="mode" data-property="flex-wrap" data-value="wrap">wrap</button>
  <button class="mode" data-property="flex-wrap" data-value="wrap-reverse">wrap-reverse</button>
  <br>
  <strong>row-gap:</strong>
  <button class="mode" data-property="row-gap" data-value="normal">normal</button>
  <button class="mode" data-property="row-gap" data-value="5px">5px</button>
  <button class="mode" data-property="row-gap" data-value="25px">25px</button>
  <br>
  <strong>column-gap:</strong>
  <button class="mode" data-property="column-gap" data-value="normal">normal</button>
  <button class="mode" data-property="column-gap" data-value="5px">5px</button>
  <button class="mode" data-property="column-gap" data-value="25px">25px</button>
  <div class="container">
    <div class="item item-1">1</div>
    <div class="item item-2">2</div>
    <div class="item item-3">3</div>
    <div class="item item-4">4</div>
    <div class="item item-5">5</div>
    <div class="item item-6">6</div>
    <div class="item item-7">7</div>
    <div class="item item-8">8</div>
    <div class="item item-9">9</div>
  </div>
</div>
<style>
  .example-9 .container {
    display: flex;
    background: steelblue;
    min-height: 225px;
    width: 225px;
  }
  .example-9 .item {
    border: 2px solid black;
    background-color: grey;
    color: white;
    width: 50px;
    min-height: 50px;
  }
</style>
<script>
  (() => {
    const buttons = Array.from(document.querySelectorAll(".example-9 button.mode"));
    const container = document.querySelector(".example-9 .container");
    buttons.forEach(button => button.onclick = () => container.style[button.dataset.property] = button.dataset.value);
  })();
</script>
<h4 id="atajo-huecos" tabindex="-1">Atajo: Huecos</h4>
<p>En el caso de que queramos utilizar una propiedad de atajo para los huecos, podemos utilizar la propiedad <code>gap</code>:</p>
<table>
<thead>
<tr>
<th>Propiedad</th>
<th>Valor</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>gap</code></td>
<td><strong>0</strong> | <badge-type class="size"></badge-type></td>
<td>Aplica el tamaño indicado para el hueco en ambos ejes.</td>
</tr>
<tr>
<td><code>gap</code></td>
<td><strong>0 0</strong> | <badge-type class="size"></badge-type> <badge-type class="size"></badge-type></td>
<td>Aplica los tamaños indicados para el hueco del eje X y el eje Y.</td>
</tr>
</tbody>
</table>
<p>Y veamosla en práctica:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">{</span><br>  <span class="token comment">/* gap: &lt;row> &lt;column> */</span><br>  <span class="token property">gap</span><span class="token punctuation">:</span> 4px 8px<span class="token punctuation">;</span><br><br>  <span class="token comment">/* 1 parámetro: usa el mismo para ambos */</span><br>  <span class="token property">gap</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<p><caniuse-support title="gap property for Flexbox" feature="flexbox-gap" edge="84/y" firefox="63/y" chrome="84/y" safari="14.1/y" opera="70/y" ios_saf="14.5-14.8/y" and_chr="103/y" and_ff="101/y">
</caniuse-support></p>
<h3 id="orden-de-los-ítems" tabindex="-1">Orden de los ítems</h3>
<p>Por último, y quizás una de las propiedades más interesantes, es <code>order</code>, que modificar y establece el orden de los ítems según una secuencia numérica.</p>
<p>Por defecto, todos los ítems flex tienen un <code>order: 0</code> implícito, aunque no se especifique. Si indicamos un <code>order</code> con un valor numérico, irá recolocando los ítems según su número, colocando antes los ítems con número más pequeño (<em>incluso valores negativos</em>) y después los ítems con números más altos.</p>
<div class="example example-10">
  <strong>order (item-1):</strong>
  <input class="mode" type="number" data-target="item-1" data-property="order" value="0">
  <br>
  <strong>order (item-2):</strong>
  <input class="mode" type="number" data-target="item-2" data-property="order" value="0">
  <br>
  <strong>order (item-3):</strong>
  <input class="mode" type="number" data-target="item-3" data-property="order" value="0">
  <div class="container">
    <div class="item item-1">1</div>
    <div class="item item-2">2</div>
    <div class="item item-3">3</div>
  </div>
</div>
<style>
  .example-10 .container {
    display: flex;
    background: steelblue;
  }
  .example-10 input {
    padding: 2px 4px;
    width: 45px;
  }
  .example-10 .item {
    border: 2px solid black;
    background-color: grey;
    color: white;
    width: 50px;
    height: 50px;
  }
</style>
<script>
  (() => {
    const inputs = Array.from(document.querySelectorAll(".example-10 input.mode"));
    inputs.forEach(input => input.oninput = () => document.querySelector(`.example-10 div.${input.dataset.target}`).style.order = input.value);
  })();
</script>
<p>De esta forma podemos recolocar fácilmente los ítems incluso utilizando media queries o responsive design.</p>
<p><caniuse-support title="CSS Flexible Box Layout Module" feature="flexbox" edge="12/y" firefox="28/y" chrome="21/y" safari="6.1/y" opera="12.1/y" ios_saf="7.0-7.1/y" and_chr="103/y" and_ff="101/y">
</caniuse-support></p>
<!-- Especificación W3C: https://www.w3.org/TR/css-flexbox-1/ -->

    <nav class="prev-next"><a class="bt prev" href="../desplazamientos/index.htm" title="La propiedad float">
    <span class="data">
      <span>La propiedad float</span>
      <small>Capítulo anterior</small>
    </span>
  </a><a class="bt next" href="../grid-css/index.htm" title="Grid CSS">
    <span class="icon">
      <svg-icon name="arrow-right"></svg-icon>
    </span>
    <span class="data">
      <span>Grid CSS</span>
      <small>Capítulo siguiente</small>
    </span>
  </a></nav>

    <script async="" src="../../../pagead/js/f.txt"></script>
<ins class="adsbygoogle" style="display:block; text-align:center; margin:auto; margin-top: 2em" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-0412426997270095" data-ad-slot="3027930890"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
</div>

      <div class="related">

  <div class="author">
    <div class="author-wrapper">
      <img loading="lazy" class="circle" src="../../../assets/manz.webp" alt="Manz">
      <div>
        <p>Docente, divulgador informático y <a href="https://manz.dev/">streamer de código</a>. Amante de <strong>CSS</strong>, <strong>Javascript</strong>
          y de la plataforma web. Ha trabajado como profesor en la Universidad de La Laguna y es director del curso de
          Programación web FullStack y FrontEnd de EOI desde Tenerife. En sus ratos libres, busca GIF de gatos en Internet.</p>
        <p class="twitch-badge">
          <a href="https://twitch.tv/ManzDev">
            <svg class="twitch" viewbox="0 0 1024 1024">
              <path style="fill-opacity: 1; stroke: none; stroke-width: 1px; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;" d="m262.451 12.904-178.26 178.26v641.672h213.905v178.26l178.26-178.26h142.576L939.809 512V12.904H262.45zm35.645 71.287h570.383v392.164L725.904 618.932H583.287L458.514 743.705V618.932H298.096V84.192zM494.158 208.51v216.36h71.328V208.51h-71.328zm196 0v216.36h71.328V208.51h-71.328z"></path>
            </svg>
            Sígueme en Twitch
          </a>
        </p>
      </div>
    </div>
  </div>

  <div id="comentarios">
    <script async="" src="../../../count.js" id="dsq-count-scr"></script>
<script>
var disqus_config = function () {
  this.page.path = location.pathname.endsWith("/") ? location.pathname.substring(0, location.pathname.length - 1) : location.pathname;
  this.page.url = 'https://lenguajecss.com' + this.page.path;
  this.page.identifier = this.page.url;
};
document.addEventListener('DOMContentLoaded', function() {
  const coms = document.querySelector('#comentarios');
  a = coms.querySelector('#disqus_button');
  a.dataset.disqusIdentifier = 'https://lenguajecss.com' + (location.pathname.endsWith("/") ? location.pathname.substring(0, location.pathname.length - 1) : location.pathname);
  a.addEventListener('click', function() {
    const div = document.createElement('div');
    div.id = 'disqus_thread';
    coms.appendChild(div);
    const d = document, s = d.createElement('script');
    s.src = '//lenguajecss.disqus.com/embed.js';
    s.setAttribute('data-timestamp', +new Date());
    (d.head || d.body).appendChild(s);
    this.remove();
  });
});
</script>

    <a class="disqus-comment-count" id="disqus_button" href="#disqus_thread" data-disqus-identifier="https://lenguajecss.com/css/maquetacion-y-colocacion/flexbox/">Leer comentarios</a>
    <a class="discord" href="https://discord.manz.dev/">¡Accede a Discord y cuéntanos!</a>
  </div>

</div>

    </div>
    <div class="aside">
      <div class="aside">

  <div class="aside-top">
    <a href="https://manz.dev/digitalocean" title="Empieza en DigitalOcean con 100$">
      <img width="240" height="120" src="../../../assets/digital-ocean.png" alt="DigitalOcean">
    </a>
  </div><div class="video-related">
  <div class="table">Hablo de esto en...</div>
  <a href="https://youtu.be/5ckym8sBJ4E"><img width="220" height="124" src="../../../vi/5ckym8sBJ4E/mqdefault.jpg" alt="Flexbox CSS"></a>
</div><script type="module">
  const ANCHOR_ICON = /* svg */`
    <svg class="anchor" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 205 205" width="36" height="36">
      <path d="m140 129 16 16s-20 30-42 30V71c14-5 25-18 25-34 0-20-17-36-37-36-21 0-38 16-38 36 0 15 11 29 25
              34v104c-26-2-42-27-42-27l18-18-65-9 10 63 17-17c15 12 32 37 73 37 51-1 63-29 76-40l19 19 10-64-65
              10zM83 36c0-10 8-18 19-18s19 8 19 18c0 11-9 19-19 19s-19-8-19-19z"/>
    </svg>`;
  // Add inner links to sidebar menu
  export const addInnerLinks = () => {
    const summary = document.querySelector(".aside .summary .links");
    const headers = Array.from(document.querySelectorAll(".content h3, .content h4"));
    const tocLinks = [];
    headers.forEach((e) => {
      const link = `${location.origin}${location.pathname}#${e.id}`;
      e.innerHTML = `<a class="permalink" href="${link}">${e.textContent} ${ANCHOR_ICON}</a>`;
      const headerType = e.nodeName.toLowerCase();
      const textContent = headerType === "h4" ? e.textContent.replace("La propiedad ", "").replace("La función ", "") : e.textContent;
      tocLinks.push(`<a class="${headerType}" href="#${e.id}">${textContent}</a>`);
    });
    summary.insertAdjacentHTML("beforeEnd", tocLinks.join("\n"));
  };

  addInnerLinks();
</script>

<div class="summary">
  <div class="table">Tabla de contenidos</div>
  <div class="links"></div>
</div>
<div class="video-related">
  <div class="table">Lo usamos en...</div><a href="https://youtu.be/wIGAyJGx2kc"><img src="../../../vi/wIGAyJGx2kc/mqdefault.jpg" alt="Flexbox CSS"></a><a href="https://youtu.be/jSia5SigafE"><img src="../../../vi/jSia5SigafE/mqdefault.jpg" alt="Flexbox CSS"></a></div></div>

    </div>
  </div><footer class="main">
  <div class="square">
    <a href="/"><h2>Lenguaje CSS</h2></a>
    <div class="icons">
      <a href="https://twitter.com/Manz" title="Twitter"><svg-icon type="social" name="twitter"></svg-icon></a>
      <a href="https://twitch.tv/manzdev" title="Twitch"><svg-icon type="social" name="twitch"></svg-icon></a>
      <a href="https://instagram.com/manz.dev" title="Instagram"><svg-icon type="social" name="instagram"></svg-icon></a>
      <a href="https://youtube.com/ManzDev?sub_confirmation=1" title="YouTube"><svg-icon type="social" name="youtube"></svg-icon></a>
      <a href="https://discord.manz.dev/" title="Servidor de Discord"><svg-icon type="social" name="discord"></svg-icon></a>
      <a href="https://github.com/ManzDev" title="GitHub"><svg-icon type="social" name="github"></svg-icon></a>
      <a href="https://codepen.io/Manz" title="Codepen"><svg-icon type="social" name="codepen"></svg-icon></a>
      <a href="https://www.linkedin.com/in/joseromanhdez/" title="Linkedin"><svg-icon type="social" name="linkedin"></svg-icon></a>
    </div>
    <p>Documentación sobre CSS y las mejores herramientas y recursos para aprender a utilizar el lenguaje de estilos CSS (Hojas de estilo).</p>
    <p id="footer">Creado y mantenido por <a href="https://twitter.com/Manz">@Manz</a> con <span title="<3">❤</span></p></div>
</footer>

<script>
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga('create', 'UA-136544-3', 'auto');
ga('send', 'pageview');
</script>
<script async="" src='../../../analytics.js'></script>


</body>
</html>
