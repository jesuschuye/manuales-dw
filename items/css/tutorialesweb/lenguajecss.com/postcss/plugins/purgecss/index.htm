<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="theme-color" content="#1e7bbf">
  <link rel="shortcut icon" href="../../../favicon-1.ico">
  <title>PurgeCSS: CSS no utilizado - CSS en español - Lenguaje CSS</title>
  <link rel="preload" href="../../../critical-1.css" as="style">
  <link rel="preload" href="../../../assets/fonts/blinker-vf-1.woff2" as="font" crossorigin="">
  <link rel="preload" href="../../../assets/fonts/scope-one-400-1.woff2" as="font" crossorigin="">
  <meta name="description" content="En CSS es muy común olvidarse de eliminar código CSS que ya no se usa. PurgeCSS es una herramienta para eliminar código CSS muerto de nuestros proyectos.">
  <link rel="stylesheet" href="../../../critical-1.css">
  <link rel="stylesheet" href="../../../theme-1.css">
  <script type="module" src="../../../main-1.js"></script>
  <link rel="canonical" href="index.htm">
  <meta property="og:title" content="PurgeCSS: CSS no utilizado - CSS en español">
  <meta property="og:image" content="https://lenguajecss.com/postcss/plugins/purgecss/purgecss.jpg">
  <meta property="og:type" content="article">
  <meta property="og:description" content="En CSS es muy común olvidarse de eliminar código CSS que ya no se usa. PurgeCSS es una herramienta para eliminar código CSS muerto de nuestros proyectos.">
  <meta property="og:url" content="https://lenguajecss.com/postcss/plugins/purgecss/">
  <meta property="twitter:url" content="https://lenguajecss.com/postcss/plugins/purgecss/">
  <meta property="twitter:card" content="summary_large_image">
  <meta property="twitter:creator" content="@Manz">
  <meta property="twitter:title" content="PurgeCSS: CSS no utilizado - CSS en español">
  <meta property="twitter:description" content="En CSS es muy común olvidarse de eliminar código CSS que ya no se usa. PurgeCSS es una herramienta para eliminar código CSS muerto de nuestros proyectos.">
  <meta property="twitter:image:src" content="https://lenguajecss.com/postcss/plugins/purgecss/purgecss.jpg">
</head>
<body class="css post"><div class="page">
    <div class="sidebar">
      <div class="logo flex-center">
  <a href="../../../index.htm">
    <img width="42" height="42" src="../../../assets/logo-1.svg" alt="Logo">
    Lenguaje CSS
  </a>
  <div class="icons" style="--icon-size: 32px; --icon-side-padding: 0.15em">
    <a href="https://twitter.com/Manz" title="Twitter"><svg-icon type="social" name="twitter"></svg-icon></a>
    <a href="https://twitch.tv/manzdev" title="Twitch"><svg-icon type="social" name="twitch"></svg-icon></a>
    <a href="https://instagram.com/manz.dev" title="Instagram"><svg-icon type="social" name="instagram"></svg-icon></a>
    <a href="https://youtube.com/ManzDev?sub_confirmation=1" title="YouTube"><svg-icon type="social" name="youtube"></svg-icon></a>
    <a href="https://discord.manz.dev/" title="Servidor de Discord"><svg-icon type="social" name="discord"></svg-icon></a>
  </div>
  <span>Un sitio web de <a href="https://manz.dev/"><mark>Manz.dev</mark></a></span>
</div>

      <form class="search flex-center" action="https://www.google.com/search">
  <label><span>Buscar:</span> <input type="search" name="q" placeholder="Buscar un tema (ej: flex, grid...)" autocomplete="off"></label>
  <label><span>Sitio:</span> <input type="hidden" name="q" value="site:lenguajejs.com OR site:lenguajecss.com OR site:lenguajehtml.com OR site:terminaldelinux.com OR site:manz.dev"></label>
  <div class="search-results"></div>
</form>

      

<style>
  sidebar-link {
    --logo-image: url(../../logo.svg);
  }
</style>

<div class="toc"><sidebar-link title="Volver al índice" href="../../index.htm" back="" direct=""></sidebar-link><sidebar-section title="Introducción a PostCSS" href="../../introduccion/index.htm"><sidebar-link href="../../introduccion/que-es/index.htm" title="¿Qué es PostCSS?"></sidebar-link><sidebar-link href="../../introduccion/configuracion-postcss/index.htm" title="Configuración de PostCSS"></sidebar-link><sidebar-link href="../../introduccion/browserslist/index.htm" title="¿Qué es Browserslist?"></sidebar-link></sidebar-section><sidebar-section title="Plugins de PostCSS" href="../index.htm"><sidebar-link href="../autoprefixer/index.htm" title="Autoprefixer: Prefijos CSS"></sidebar-link><sidebar-link href="../css-nesting/index.htm" title="CSS Nesting: CSS anidado"></sidebar-link><sidebar-link href="index.htm" title="PurgeCSS: CSS no utilizado"></sidebar-link></sidebar-section></div>

      
    </div>
    <div class="contents">
      <header class="mega">
  <h1>PurgeCSS: CSS no utilizado</h1></header>

      <div class="content ">
  <div class="breadcrumbs">
  <a href="../../../index.htm">ATRÁS</a> <span>ᐳ</span> <a href="../../index.htm">postcss</a> <span>ᐳ</span> <a href="index.htm">PurgeCSS: CSS no utilizado</a>
</div>
<p>La <strong>naturaleza de CSS</strong> (<em>sobre todo cuando no se usan estrategias de organización o arquitecturas</em>) unida a los frenéticos <strong>ritmos de desarrollo</strong>, suelen provocar que los desarrolladores adquieran muy malas prácticas que hacen que el código CSS se vuelva <strong>muy difícil de mantener</strong>.</p>
<p><img src="purgecss.jpg" alt="PurgeCSS: Código CSS no utilizado" width="1024" height="600" loading="lazy"></p>
<h3 id="qué-es-el-código-muerto" tabindex="-1">¿Qué es el código muerto?</h3>
<p>A medida que van creciendo nuestros proyectos y realizamos modificaciones en los elementos HTML y estructuras de páginas de nuestro proyecto, es muy habitual que el código CSS permanezca y no se borre del proyecto (<em>el clásico «lo dejo por si acaso»</em>), generando el denominado <strong>código CSS muerto</strong> (<em>código CSS no utilizado</em>).</p>
<blockquote>
<p>El <strong>código CSS muerto</strong> engorda el tamaño de los ficheros de CSS, no es de utilidad y, por si fuera poco, dependiendo de la especificidad y nombrado de elementos CSS es muy posible que introduzca potenciales errores. Hay que intentar ser muy organizado y evitarlo.</p>
</blockquote>
<h3 id="cómo-detecto-código-muerto" tabindex="-1">¿Cómo detecto código muerto?</h3>
<p>En pequeños proyectos puede resultar sencillo (<em>incluso podemos revisarlo manualmente</em>), pero en proyectos grandes <strong>detectar código muerto</strong> puede ser una tarea muy complicada, sobretodo si utilizamos enfoques de CSS global sin una arquitectura concreta.</p>
<blockquote>
<blockquote>
<p>Uno de los mejores métodos para <strong>prevenir la creación de código muerto</strong> que mejor funcionan hoy en día, es crear <a href="https://lenguajejs.com/webcomponents/">componentes</a>, ya que vuelve mucho más fácil mantener código HTML, CSS y Javascript asociado a estructuras relacionadas.</p>
</blockquote>
</blockquote>
<p>Una de las formas rápidas de visualizar el código CSS o Javascript que está siendo utilizado al navegar por una página, es la característica <strong>CSS/JS Coverage</strong> (<em>Cubrimiento CSS/JS</em>) de Google Chrome.</p>
<p>Para acceder a esta sección, pulsamos <kbd>CTRL</kbd>+<kbd>SHIFT</kbd>+<kbd>I</kbd> y accedemos al <strong>Inspector de Elementos</strong>. El menú de los <strong>tres puntos</strong>, seleccionamos <strong>More tools</strong> / <strong>Coverage</strong>. Nos aparecerá un nuevo panel, donde deberemos pulsar el botón para volver a recargar la página utilizando esta funcionalidad.</p>
<p><img src="google-chrome-coverage.png" alt="Google Chrome: Coverage" width="1277" height="777" loading="lazy"></p>
<p>Observaremos que nos aparecen una lista de archivos (<em>CSS y Javascript</em>) junto a unas franjas donde se nos muestra en <strong>rojo</strong> la cantidad de código no utilizado y en <strong>azul</strong> el código utilizado.</p>
<blockquote>
<blockquote>
<blockquote>
<p>Hay que tener mucho cuidado con esto, ya que el navegador va actualizando esta información a medida que usamos la página (<em>scroll, botones, acciones...</em>), por lo que es muy probable que haya código que se va «<strong>descubriendo</strong>» y reflejando a medida que lo utilizamos.</p>
</blockquote>
</blockquote>
</blockquote>
<h3 id="eliminación-de-código-css-muerto" tabindex="-1">Eliminación de código CSS muerto</h3>
<p>Sin embargo, aunque la funcionalidad <strong>Coverage</strong> es una forma genial de hacernos una idea de si algún fragmento de código se utiliza al realizar una acción en una parte concreta de nuestra web, probablemente nos gustaría alguna forma un poco más automática de eliminar código muerto de nuestra página.</p>
<p>Existen varias herramientas que analizan el código HTML/JS de nuestro proyecto y luego comparan con el CSS en busca de <strong>código CSS no utilizado</strong>. Esto es especialmente útil cuando se utilizan frameworks pesados que tienen gran cantidad de reglas que muchas veces no se utilizan.</p>
<p>Los plugins de <strong>eliminación de código CSS no utilizado</strong> más populares son los siguientes:</p>
<table>
<thead>
<tr>
<th>Plugin</th>
<th>Autor</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/FullHuman/purgecss">PurgeCSS</a></td>
<td>FullHuman</td>
<td>Elimina código CSS no utilizado. Plugins para PostCSS, Webpack, Gulp, Grunt y Gatsby.</td>
</tr>
<tr>
<td><a href="https://github.com/uncss/uncss">UnCSS</a></td>
<td>uncss</td>
<td>Elimina código CSS no utilizado. Usa PostCSS. Plugins para Grunt, Gulp y Broccoli.</td>
</tr>
<tr>
<td><a href="https://github.com/purifycss/purifycss">PurifyCSS</a></td>
<td>purifycss</td>
<td>Elimina código CSS no utilizado. Plugins para Grunt, Gulp y Webpack.</td>
</tr>
</tbody>
</table>
<p>La herramienta que parece tener mejor soporte y que más se actualiza es <strong>PurgeCSS</strong>, que es la que utilizaremos en este artículo.</p>
<h3 id="instalación-de-purgecss" tabindex="-1">Instalación de PurgeCSS</h3>
<p>Para instalar y configurar <strong>PurgeCSS</strong>, primero debemos instalar el paquete en nuestro proyecto, como dependencia de desarrollo:</p>
<pre class="language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> --save-dev postcss-purgecss</code></pre>
<p>Una vez hecho esto, editaremos nuestro fichero de configuración <code>postcss.config.js</code> y añadimos el plugin. Generalmente, <code>purgecss</code> es un plugin que se aplica al principio, para eliminar el máximo posible de CSS no utilizado y agilizar el trabajo con él:</p>
<pre class="language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span><br>  <span class="token string-property property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>    <span class="token string-property property">"postcss-purgecss"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>      <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src/**/*.html"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><br>      <span class="token literal-property property">css</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src/**/*.css"</span><span class="token punctuation">]</span><br>    <span class="token punctuation">}</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">}</span></code></pre>
<p>En la variable <code>css</code> podemos incluir las rutas de nuestro framework CSS. <strong>PurgeCSS</strong> es muy utilizado con frameworks como <a href="https://tailwindcss.com/">TailwindCSS</a>, por ejemplo. Observa, que al contrario de muchos plugins que hemos visto, <code>purgecss</code> no sólo se establece un <code>true</code> para activarlo, sino que hay que indicar varios parámetros de configuración:</p>
<table>
<thead>
<tr>
<th>Parámetro</th>
<th>Descripción</th>
</tr>
</thead>
<tbody>
<tr>
<td><badge-type class="array"></badge-type> <code>content</code></td>
<td>Indica las rutas donde tenemos contenido HTML o similar: <code>.jsx</code>, <code>.js</code>, <code>.vue</code>, etc...</td>
</tr>
<tr>
<td><badge-type class="array"></badge-type> <code>css</code></td>
<td>Indica las rutas donde tenemos nuestro contenido CSS a revisar.</td>
</tr>
<tr>
<td><badge-type class="function"></badge-type> <code>defaultExtractor</code></td>
<td>Permite definir un extractor de CSS personalizado.</td>
</tr>
<tr>
<td><badge-type class="array"></badge-type> <code>extractors</code></td>
<td>Permite definir un array de extractores de CSS personalizados.</td>
</tr>
<tr>
<td><badge-type class="boolean"></badge-type> <code>fontFace</code></td>
<td>Elimina reglas <code>@font-face</code> no utilizadas. Por defecto, <strong>false</strong>.</td>
</tr>
<tr>
<td><badge-type class="boolean"></badge-type> <code>keyframes</code></td>
<td>Elimina reglas <code>@keyframes</code> no utilizadas. Por defecto, <strong>false</strong>.</td>
</tr>
<tr>
<td><badge-type class="boolean"></badge-type> <code>variables</code></td>
<td>Elimina <a href="../../../css/introduccion/css-custom-properties/index-1.htm">custom properties</a> no utilizadas. Por defecto, <strong>false</strong>.</td>
</tr>
<tr>
<td><badge-type class="boolean"></badge-type> <code>rejected</code></td>
<td>Analiza el código eliminado para detectar errores. Por defecto, <strong>false</strong>.</td>
</tr>
<tr>
<td><badge-type class="array"></badge-type> <code>whitelist</code></td>
<td>Indica selectores CSS que no deben ser eliminados.</td>
</tr>
</tbody>
</table>
<p>Además de <code>whitelist</code>, también tenemos <code>whitelistPatterns</code> y <code>whitelistPatternsChildren</code>, que son <badge-type class="array"></badge-type> de <badge-type class="regexp"></badge-type> que permiten aprovechar la potencia de las expresiones regulares para crear <strong>whitelists</strong> más flexibles.</p>
<h3 id="eliminando-css-no-utilizado" tabindex="-1">Eliminando CSS no utilizado</h3>
<p>Una vez lo tengamos todo instalado y configurado, vamos a hacer una prueba para comprobar si funciona correctamente. Creamos un archivo <code>src/css/index.css</code> (<em>que realmente es PostCSS</em>):</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">{</span><br>  <span class="token property">background</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span><br><span class="token punctuation">}</span><br><br><span class="token selector">.warning</span> <span class="token punctuation">{</span><br>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><br><span class="token punctuation">}</span><br><br><span class="token selector">.notused</span> <span class="token punctuation">{</span><br>  <span class="token property">background</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><br>  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><br>  <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<p>En este archivo, existen tres clases: <code>.item</code>, <code>.warning</code> y <code>.notused</code>. Las dos primeras existirán en nuestro proyecto, pero la última no. Vamos a comprobar si <code>purgecss</code> elimina ese código muerto del proyecto. Creamos el fichero <code>src/index.html</code>:</p>
<pre class="language-html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>PostCSS example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css/index.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Item #1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><br>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>warning<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Warning!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><br>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>
<blockquote>
<blockquote>
<p>Recuerda que es muy importante asegurarse de tener las opciones <code>content</code> y <code>css</code> indicando todas las rutas con los ficheros implicados en el fichero <code>postcss.config.js</code>.</p>
</blockquote>
</blockquote>
<p>Ahora, solo tendríamos que ejecutar <strong>PostCSS</strong> para ponerlo a funcionar todo:</p>
<pre class="language-bash"><code class="language-bash">$ npx postcss src/css/index.css --no-map</code></pre>
<p>Si todo ha ido bien, esto nos devolverá el siguiente código CSS:</p>
<pre class="language-css"><code class="language-css"><span class="token selector">.item</span> <span class="token punctuation">{</span><br>  <span class="token property">background</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span><br><span class="token punctuation">}</span><br><br><span class="token selector">.warning</span> <span class="token punctuation">{</span><br>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><br><span class="token punctuation">}</span></code></pre>
<p>Como vemos, ha suprimido la clase <code>.notused</code> porque no ha encontrado ninguna referencia en el código HTML de <code>content</code>. Recuerda que si trabajas con framework o librerías como <code>Vue</code> o <code>React</code>, debes también incluir los archivos <code>.jsx</code> o <code>.vue</code>, ya que pueden incluir clases en ellos.</p>
<h3 id="eliminar-css-sólo-en-producción" tabindex="-1">Eliminar CSS sólo en producción</h3>
<p>El proceso de eliminar el CSS no utilizado se realiza cada vez que creamos una nueva versión de nuestro proyecto, y cuando tenemos un servidor de desarrollo, esto suele ocurrir cada vez que modificamos nuestro código. Si nuestro código CSS es muy extenso, es muy posible que este proceso de eliminación de CSS no utilizado sea lento, por lo que puede ser molesto que se realice frecuentemente.</p>
<p>En principio, en desarrollo, eliminar el CSS no utilizado no nos aporta demasiado por lo que podríamos hacer algo para eliminarlo sólo cuando generemos la versión de producción. Esto es muy sencillo si estamos utilizando el fichero de configuración <code>postcss.config.js</code>:</p>
<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> purgecssOptions <span class="token operator">=</span> <span class="token punctuation">{</span><br>  <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src/**/*.html"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><br>  <span class="token literal-property property">css</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src/**/*.css"</span><span class="token punctuation">]</span><br><span class="token punctuation">}</span><br><br>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span><br>  <span class="token string-property property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">{</span><br>    <span class="token string-property property">"postcss-purgecss"</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">"production"</span> <span class="token operator">?</span> purgecssOptions <span class="token operator">:</span> <span class="token boolean">false</span><br>  <span class="token punctuation">}</span><br><span class="token punctuation">}</span></code></pre>
<p>Observa que lo que hemos hecho es extraer las opciones de <code>purgecss</code> a un objeto <code>purgecssOptions</code>. En su lugar, utilizamos un <a href="https://lenguajejs.com/javascript/introduccion/estructuras-de-control/#operador-ternario">operador ternario</a>, que comprueba el valor de <code>process.env.NODE_ENV</code> que es una variable de entorno de Node que indica si estamos en modo de desarrollo o en modo de producción.</p>
<blockquote>
<blockquote>
<p>La variable de entorno <code>NODE_ENV</code> es un convenio que se suele utilizar, donde se suele tener valores como <code>production</code> o <code>prod</code> cuando estamos realizando tareas de producción, y <code>development</code> o <code>dev</code> cuando estamos realizando tareas de desarrollo. No obstante, esto depende de nosotros y de como configuremos estas fases.</p>
</blockquote>
</blockquote>

    <nav class="prev-next"><a class="bt prev" href="../css-nesting/index.htm" title="CSS Nesting: CSS anidado">
    <span class="data">
      <span>CSS Nesting: CSS anidado</span>
      <small>Capítulo anterior</small>
    </span>
  </a></nav>

    <script async="" src="../../../pagead/js/f-1.txt"></script>
<ins class="adsbygoogle" style="display:block; text-align:center; margin:auto; margin-top: 2em" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-0412426997270095" data-ad-slot="3027930890"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
</div>

      <div class="related">

  <div class="author">
    <div class="author-wrapper">
      <img loading="lazy" class="circle" src="../../../assets/manz-1.webp" alt="Manz">
      <div>
        <p>Docente, divulgador informático y <a href="https://manz.dev/">streamer de código</a>. Amante de <strong>CSS</strong>, <strong>Javascript</strong>
          y de la plataforma web. Ha trabajado como profesor en la Universidad de La Laguna y es director del curso de
          Programación web FullStack y FrontEnd de EOI desde Tenerife. En sus ratos libres, busca GIF de gatos en Internet.</p>
        <p class="twitch-badge">
          <a href="https://twitch.tv/ManzDev">
            <svg class="twitch" viewbox="0 0 1024 1024">
              <path style="fill-opacity: 1; stroke: none; stroke-width: 1px; stroke-linecap: butt; stroke-linejoin: miter; stroke-opacity: 1;" d="m262.451 12.904-178.26 178.26v641.672h213.905v178.26l178.26-178.26h142.576L939.809 512V12.904H262.45zm35.645 71.287h570.383v392.164L725.904 618.932H583.287L458.514 743.705V618.932H298.096V84.192zM494.158 208.51v216.36h71.328V208.51h-71.328zm196 0v216.36h71.328V208.51h-71.328z"></path>
            </svg>
            Sígueme en Twitch
          </a>
        </p>
      </div>
    </div>
  </div>

  <div id="comentarios">
    <script async="" src="../../../count-1.js" id="dsq-count-scr"></script>
<script>
var disqus_config = function () {
  this.page.path = location.pathname.endsWith("/") ? location.pathname.substring(0, location.pathname.length - 1) : location.pathname;
  this.page.url = 'https://lenguajecss.com' + this.page.path;
  this.page.identifier = this.page.url;
};
document.addEventListener('DOMContentLoaded', function() {
  const coms = document.querySelector('#comentarios');
  a = coms.querySelector('#disqus_button');
  a.dataset.disqusIdentifier = 'https://lenguajecss.com' + (location.pathname.endsWith("/") ? location.pathname.substring(0, location.pathname.length - 1) : location.pathname);
  a.addEventListener('click', function() {
    const div = document.createElement('div');
    div.id = 'disqus_thread';
    coms.appendChild(div);
    const d = document, s = d.createElement('script');
    s.src = '//lenguajecss.disqus.com/embed.js';
    s.setAttribute('data-timestamp', +new Date());
    (d.head || d.body).appendChild(s);
    this.remove();
  });
});
</script>

    <a class="disqus-comment-count" id="disqus_button" href="#disqus_thread" data-disqus-identifier="https://lenguajecss.com/postcss/plugins/purgecss/">Leer comentarios</a>
    <a class="discord" href="https://discord.manz.dev/">¡Accede a Discord y cuéntanos!</a>
  </div>

</div>

    </div>
    <div class="aside">
      <div class="aside">

  <div class="aside-top">
    <a href="https://manz.dev/digitalocean" title="Empieza en DigitalOcean con 100$">
      <img width="240" height="120" src="../../../assets/digital-ocean-1.png" alt="DigitalOcean">
    </a>
  </div><script type="module">
  const ANCHOR_ICON = /* svg */`
    <svg class="anchor" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 205 205" width="36" height="36">
      <path d="m140 129 16 16s-20 30-42 30V71c14-5 25-18 25-34 0-20-17-36-37-36-21 0-38 16-38 36 0 15 11 29 25
              34v104c-26-2-42-27-42-27l18-18-65-9 10 63 17-17c15 12 32 37 73 37 51-1 63-29 76-40l19 19 10-64-65
              10zM83 36c0-10 8-18 19-18s19 8 19 18c0 11-9 19-19 19s-19-8-19-19z"/>
    </svg>`;
  // Add inner links to sidebar menu
  export const addInnerLinks = () => {
    const summary = document.querySelector(".aside .summary .links");
    const headers = Array.from(document.querySelectorAll(".content h3, .content h4"));
    const tocLinks = [];
    headers.forEach((e) => {
      const link = `${location.origin}${location.pathname}#${e.id}`;
      e.innerHTML = `<a class="permalink" href="${link}">${e.textContent} ${ANCHOR_ICON}</a>`;
      const headerType = e.nodeName.toLowerCase();
      const textContent = headerType === "h4" ? e.textContent.replace("La propiedad ", "").replace("La función ", "") : e.textContent;
      tocLinks.push(`<a class="${headerType}" href="#${e.id}">${textContent}</a>`);
    });
    summary.insertAdjacentHTML("beforeEnd", tocLinks.join("\n"));
  };

  addInnerLinks();
</script>

<div class="summary">
  <div class="table">Tabla de contenidos</div>
  <div class="links"></div>
</div>
</div>

    </div>
  </div><footer class="main">
  <div class="square">
    <a href="../../../index.htm"><h2>Lenguaje CSS</h2></a>
    <div class="icons">
      <a href="https://twitter.com/Manz" title="Twitter"><svg-icon type="social" name="twitter"></svg-icon></a>
      <a href="https://twitch.tv/manzdev" title="Twitch"><svg-icon type="social" name="twitch"></svg-icon></a>
      <a href="https://instagram.com/manz.dev" title="Instagram"><svg-icon type="social" name="instagram"></svg-icon></a>
      <a href="https://youtube.com/ManzDev?sub_confirmation=1" title="YouTube"><svg-icon type="social" name="youtube"></svg-icon></a>
      <a href="https://discord.manz.dev/" title="Servidor de Discord"><svg-icon type="social" name="discord"></svg-icon></a>
      <a href="https://github.com/ManzDev" title="GitHub"><svg-icon type="social" name="github"></svg-icon></a>
      <a href="https://codepen.io/Manz" title="Codepen"><svg-icon type="social" name="codepen"></svg-icon></a>
      <a href="https://www.linkedin.com/in/joseromanhdez/" title="Linkedin"><svg-icon type="social" name="linkedin"></svg-icon></a>
    </div>
    <p>Documentación sobre CSS y las mejores herramientas y recursos para aprender a utilizar el lenguaje de estilos CSS (Hojas de estilo).</p>
    <p id="footer">Creado y mantenido por <a href="https://twitter.com/Manz">@Manz</a> con <span title="<3">❤</span></p></div>
</footer>

<script>
window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;
ga('create', 'UA-136544-3', 'auto');
ga('send', 'pageview');
</script>
<script async="" src='../../../analytics-1.js'></script>


</body>
</html>
